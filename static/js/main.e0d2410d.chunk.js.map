{"version":3,"sources":["redux/eventsReducer.ts","components/Event.tsx","components/Filters.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["eventsReducer","createSlice","name","initialState","loading","events","reducers","eventsLoaded","state","action","payload","favouriteChanged","map","el","id","favourite","shownChanged","city","month","date","split","shown","actions","reducer","Event","event","dispatch","useDispatch","className","style","backgroundImage","image","backgroundColor","onClick","ev","localStorage","getItem","removeItem","setItem","Filters","useState","filter","setFilter","handleChange","prevState","target","value","checked","useEffect","marginLeft","defaultValue","onChange","type","undefined","App","a","fetch","response","json","isFavourite","useSelector","length","genre","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0d2410d.chunk.js","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\r\nimport {Dispatch} from \"redux\";\r\nimport {EventsState} from \"../types\";\r\n\r\n\r\nconst initialState = {loading: true, events: []} as EventsState\r\n\r\nconst eventsReducer = createSlice({\r\n    name: \"events\",\r\n    initialState,\r\n    reducers: {\r\n        eventsLoaded: (state, action) => {\r\n            state.loading = false;\r\n            state.events = action.payload;\r\n        },\r\n        favouriteChanged: (state, action) => {\r\n            state.events = state.events.map(el => {\r\n                if (el.id !== action.payload.id) {\r\n                    return el;\r\n                }\r\n                return {...el, favourite: !action.payload.favourite}\r\n            });\r\n        },\r\n        shownChanged: (state, action) => {\r\n            state.events = state.events.map((el) => {\r\n                if ((action.payload.city === el.city || action.payload.city === 'all')\r\n                    && (action.payload.month === el.date.split('.')[1] || action.payload.month === 'all')\r\n                    && (!action.payload.favourite || el.favourite === true)) {\r\n                    return {...el, shown: true}\r\n                }\r\n                return {...el, shown: false};\r\n            })\r\n        }\r\n    }\r\n});\r\nconst {actions, reducer} = eventsReducer;\r\nexport const {eventsLoaded, favouriteChanged, shownChanged} = actions;\r\nexport {reducer};\r\n\r\nexport const fetchEvents = () => async (dispatch: Dispatch) => {\r\n    const response = await fetch('https://raw.githubusercontent.com/xsolla/xsolla-frontend-school-2021/main/events.json');\r\n    let json = await response.json();\r\n    json = json.map((el: any) => {\r\n        const isFavourite = localStorage.getItem(`'${el.id}'`);\r\n        return {...el, favourite: !!isFavourite, shown: true}\r\n    })\r\n    dispatch(eventsLoaded(json));\r\n}\r\n\r\nexport type RootState = ReturnType<typeof reducer>;","import React from \"react\";\r\nimport {eventObj} from \"../types\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {favouriteChanged} from \"../redux/eventsReducer\";\r\n\r\nexport const Event = (event: eventObj): JSX.Element => {\r\n    const dispatch = useDispatch();\r\n    // Функция для выбора как избранное\r\n    const favouriteHandler = (ev: eventObj) => {\r\n        dispatch(favouriteChanged(ev));\r\n        const isThere = localStorage.getItem(`'${ev.id}'`);\r\n        if (isThere) {\r\n            localStorage.removeItem(`'${ev.id}'`);\r\n        } else {\r\n            localStorage.setItem(`'${ev.id}'`, `'${ev.id}'`);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"event-group\" style={{backgroundImage: `url(\"${event.image}\")`}}>\r\n                <div className=\"event-date-cont\">\r\n                    <div className=\"event-date\">{event.date.split('.')[0]}</div>\r\n                </div>\r\n                <span className=\"event-title\">\r\n                    {event.name}\r\n                </span>\r\n                <div\r\n                    className=\"event-favourite\"\r\n                    style={{backgroundColor: event.favourite ? 'yellow' : 'white'}}\r\n                    onClick={() => {\r\n                        favouriteHandler(event)\r\n                    }}/>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {filterObj} from \"../types\";\r\nimport {shownChanged} from \"../redux/eventsReducer\";\r\n\r\nexport const Filters = (): JSX.Element => {\r\n    const dispatch = useDispatch();\r\n    const [filter, setFilter] = useState<filterObj>({\r\n        city: 'all',\r\n        month: 'all',\r\n        favourite: false\r\n    });\r\n    // Обработчик фильтров\r\n    const handleChange = (event: any) => {\r\n        setFilter(prevState => {\r\n            return {...prevState, [event.target.name]: event.target.value || event.target.checked}\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(shownChanged(filter));\r\n    }, [filter, dispatch]);\r\n\r\n    return (\r\n        <form style={{marginLeft: '70px'}}>\r\n            <label className=\"text\">\r\n                City:\r\n                <select defaultValue={filter.city} onChange={handleChange} name=\"city\" className=\"select\">\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"Amsterdam\">Amsterdam</option>\r\n                    <option value=\"Berlin\">Berlin</option>\r\n                    <option value=\"Rim\">Rim</option>\r\n                    <option value=\"St.Petersburg\">St.Petersburg</option>\r\n                </select>\r\n            </label>\r\n            <label className=\"text\">\r\n                Month:\r\n                <select defaultValue={filter.month} onChange={handleChange} name=\"month\" className=\"select\">\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"01\">January</option>\r\n                    <option value=\"02\">February</option>\r\n                    <option value=\"03\">March</option>\r\n                    <option value=\"04\">April</option>\r\n                    <option value=\"05\">May</option>\r\n                    <option value=\"06\">June</option>\r\n                    <option value=\"07\">July</option>\r\n                    <option value=\"08\">August</option>\r\n                    <option value=\"09\">September</option>\r\n                    <option value=\"10\">October</option>\r\n                    <option value=\"11\">November</option>\r\n                    <option value=\"12\">December</option>\r\n                </select>\r\n            </label>\r\n            <label className=\"text\">\r\n                Favourite:\r\n                <input type=\"checkbox\" checked={filter.favourite} value={undefined} name=\"favourite\"\r\n                       onChange={handleChange}/>\r\n            </label>\r\n        </form>\r\n    )\r\n}","import React, {useEffect} from 'react';\nimport {fetchEvents, RootState} from \"./redux/eventsReducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Event} from \"./components/Event\";\nimport {Filters} from \"./components/Filters\";\n\nfunction App() {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(fetchEvents());\n    }, [dispatch]);\n    let events = useSelector((state: RootState) => state.events);\n    events = events.filter(event => event.shown);\n    return (\n        <div className=\"container\">\n            <h1 className=\"heading\">Event Listing</h1>\n            <Filters/>\n            <div className=\"container2\">\n                {!events.length ? <h1 className=\"heading\">No such Events</h1> :\n                    events.map((event) => {\n                        return <Event key={event.id} id={event.id} name={event.name} date={event.date}\n                                      city={event.city} genre={event.genre} image={event.image}\n                                      favourite={event.favourite}\n                                      shown={event.shown}/>\n                    })}\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {configureStore} from \"@reduxjs/toolkit\";\nimport {reducer} from \"./redux/eventsReducer\"\nimport {Provider} from \"react-redux\";\nimport './index.css'\n\nconst store = configureStore({\n    reducer\n})\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}